
Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.

tests/README

  1.  Summary

  The global test target, i.e. "make test", should be executed prior to
  requesting code review and prior to integration.  That target invokes
  run.py in this directory.

  run.py drives the execution of our api and cli test suites, and
  compares the results to a baseline file stored in baseline.txt.

  run.py can also be run standalone with a variety of options:

	Usage: run.py [-ghptv] [-c format] [-b filename] [-o regexp]
	       run.py [-hptvx] [-c format] [-b filename] [-s regexp] [-o regexp]
	   -a <dir>       Archive failed test cases to <dir>/$pid/$testcasename
	   -b <filename>  Baseline filename
	   -c <format>    Collect code coverage data in xml or html format
	   -d             Show debug output, including commands run, and outputs
	   -f             Show fail/error information even when test is expected to fail
	   -g             Generate result baseline
	   -h             This help message
	   -j             Parallelism
	   -o <regexp>    Run only tests that match regexp
	   -p             Parseable output format
	   -q             Quiet output
	   -s <regexp>    Run tests starting at regexp
	   -t             Generate timing info file
	   -u             Enable IPS GUI tests, disabled by default
	   -v             Verbose output
	   -x             Stop after the first baseline mismatch
	   -z <port>      Lowest port the test suite should use

  When adding, removing, or changing the results of test cases, make
  sure to update baseline.txt and check it in.  This can be done with the
  -g option to run.py.

  The code coverage collection is done with Ned Batchelder's "coverage.py"
  tool [1].

  2.  References

  [1] N. Batchelder, coverage module, 2009.
      http://nedbatchelder.com/code/coverage/
